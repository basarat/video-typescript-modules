Lets look at all the means of code organization in TypeScript are plentiful. 

The most common pattern is the single file generation that works with the compiler --out parameter.
This is going to pull in all the files that you referece and generate a single javascript file 
for you. 
I have a grunt plugin that can manage your files in such a workflow 
and you can check out the Angular + TypeScript workflow video. 


Additionally you are free to use the module keyword within all demos. 
TypeScript doucmentation calls it internal modules.  

File level exports. TypeScrit refers to these as external modules, Two patterns CommonJS / AMD.
AMD is for when you want to target the browser, The most common library would be RequireJS, 
Use CommonJS when you want to write server side javascript code, and the most popular solution
there is  NodeJS.

Lsts look at both and the reason for why they are different will become easy to understand.

nothing stopping you from doing this manually by declaring a var called module for commonjs 
or define/require for amd. But again TypeScript provides typesafety for you. 

I have a seperate video on using AMD with requirejs
 and how you would interact with non TypeScript code specific to that pattern.